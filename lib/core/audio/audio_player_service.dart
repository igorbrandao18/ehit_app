// core/audio/audio_player_service.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:just_audio/just_audio.dart';
import '../../features/music_library/domain/entities/song.dart';

/// Servi√ßo de reprodu√ß√£o de √°udio usando just_audio
class AudioPlayerService extends ChangeNotifier {
  final AudioPlayer _audioPlayer = AudioPlayer();
  
  Song? _currentSong;
  List<Song> _playlist = [];
  int _currentIndex = 0;
  bool _isPlaying = false;
  Duration _position = Duration.zero;
  Duration _duration = Duration.zero;
  
  // Getters
  Song? get currentSong => _currentSong;
  List<Song> get playlist => _playlist;
  int get currentIndex => _currentIndex;
  bool get isPlaying => _isPlaying;
  Duration get position => _position;
  Duration get duration => _duration;
  double get progress => _duration.inMilliseconds > 0 
      ? _position.inMilliseconds / _duration.inMilliseconds 
      : 0.0;
  
  AudioPlayerService() {
    _init();
  }
  
  void _init() {
    // Listener para mudan√ßas no estado de reprodu√ß√£o
    _audioPlayer.playerStateStream.listen((state) {
      _isPlaying = state.playing;
      notifyListeners();
      
      // Se terminou a m√∫sica, toca a pr√≥xima
      if (state.processingState == ProcessingState.completed) {
        next();
      }
    });
    
    // Listener para mudan√ßas na posi√ß√£o
    _audioPlayer.positionStream.listen((position) {
      _position = position;
      notifyListeners();
    });
    
    // Listener para mudan√ßas na dura√ß√£o
    _audioPlayer.durationStream.listen((duration) {
      if (duration != null) {
        _duration = duration;
        notifyListeners();
      }
    });
  }
  
  /// Toca uma m√∫sica espec√≠fica
  Future<void> playSong(Song song) async {
    try {
      debugPrint('üéµ Tocando: ${song.title} - ${song.artist}');
      debugPrint('üéµ URL: ${song.audioUrl}');
      
      _currentSong = song;
      _playlist = [song];
      _currentIndex = 0;
      
      // Pr√©-carrega a dura√ß√£o da m√∫sica se dispon√≠vel
      _preloadDuration(song);
      
      // Simula reprodu√ß√£o se o plugin n√£o estiver dispon√≠vel
      if (kIsWeb || !await _isAudioPlayerAvailable()) {
        debugPrint('‚ö†Ô∏è Plugin de √°udio n√£o dispon√≠vel, simulando reprodu√ß√£o...');
        _simulatePlayback();
        return;
      }
      
      await _audioPlayer.setUrl(song.audioUrl);
      await _audioPlayer.play();
      
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå Erro ao tocar m√∫sica: $e');
      // Fallback para simula√ß√£o
      _simulatePlayback();
    }
  }
  
  /// Toca uma lista de m√∫sicas
  Future<void> playPlaylist(List<Song> songs, {int startIndex = 0}) async {
    if (songs.isEmpty) return;
    
    try {
      _playlist = songs;
      _currentIndex = startIndex;
      _currentSong = songs[startIndex];
      
      debugPrint('üéµ Tocando playlist: ${songs.length} m√∫sicas');
      debugPrint('üéµ Come√ßando em: ${_currentSong!.title}');
      
      // Pr√©-carrega a dura√ß√£o da m√∫sica atual se dispon√≠vel
      _preloadDuration(_currentSong!);
      
      // Se o plugin n√£o estiver dispon√≠vel, simula
      if (kIsWeb || !await _isAudioPlayerAvailable()) {
        debugPrint('‚ö†Ô∏è Plugin de √°udio n√£o dispon√≠vel, simulando playlist...');
        _simulatePlayback();
        return;
      }
      
      await _audioPlayer.setUrl(_currentSong!.audioUrl);
      await _audioPlayer.play();
      
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå Erro ao tocar playlist: $e');
      // Fallback para simula√ß√£o
      _simulatePlayback();
    }
  }
  
  /// Pausa a reprodu√ß√£o
  Future<void> pause() async {
    await _audioPlayer.pause();
    notifyListeners();
  }
  
  /// Resume a reprodu√ß√£o
  Future<void> resume() async {
    await _audioPlayer.play();
    notifyListeners();
  }
  
  /// Toggle play/pause
  Future<void> togglePlayPause() async {
    if (_isPlaying) {
      await pause();
    } else {
      await resume();
    }
  }
  
  /// Para a reprodu√ß√£o
  Future<void> stop() async {
    await _audioPlayer.stop();
    _currentSong = null;
    _position = Duration.zero;
    notifyListeners();
  }
  
  /// Pr√≥xima m√∫sica
  Future<void> next() async {
    if (_playlist.isEmpty) return;
    
    _currentIndex = (_currentIndex + 1) % _playlist.length;
    _currentSong = _playlist[_currentIndex];
    
    debugPrint('‚è≠Ô∏è Pr√≥xima m√∫sica: ${_currentSong!.title}');
    
    // Pr√©-carrega a dura√ß√£o da pr√≥xima m√∫sica se dispon√≠vel
    _preloadDuration(_currentSong!);
    
    try {
      // Se o plugin n√£o estiver dispon√≠vel, simula
      if (kIsWeb || !await _isAudioPlayerAvailable()) {
        _simulatePlayback();
        return;
      }
      
      await _audioPlayer.setUrl(_currentSong!.audioUrl);
      await _audioPlayer.play();
    } catch (e) {
      debugPrint('‚ùå Erro ao tocar pr√≥xima m√∫sica: $e');
      _simulatePlayback();
    }
    
    notifyListeners();
  }
  
  /// M√∫sica anterior
  Future<void> previous() async {
    if (_playlist.isEmpty) return;
    
    _currentIndex = (_currentIndex - 1 + _playlist.length) % _playlist.length;
    _currentSong = _playlist[_currentIndex];
    
    debugPrint('‚èÆÔ∏è M√∫sica anterior: ${_currentSong!.title}');
    
    // Pr√©-carrega a dura√ß√£o da m√∫sica anterior se dispon√≠vel
    _preloadDuration(_currentSong!);
    
    try {
      // Se o plugin n√£o estiver dispon√≠vel, simula
      if (kIsWeb || !await _isAudioPlayerAvailable()) {
        _simulatePlayback();
        return;
      }
      
      await _audioPlayer.setUrl(_currentSong!.audioUrl);
      await _audioPlayer.play();
    } catch (e) {
      debugPrint('‚ùå Erro ao tocar m√∫sica anterior: $e');
      _simulatePlayback();
    }
    
    notifyListeners();
  }
  
  /// Busca para uma posi√ß√£o espec√≠fica
  Future<void> seek(Duration position) async {
    await _audioPlayer.seek(position);
    notifyListeners();
  }
  
  /// Define o volume (0.0 a 1.0)
  Future<void> setVolume(double volume) async {
    await _audioPlayer.setVolume(volume.clamp(0.0, 1.0));
    notifyListeners();
  }
  
  /// Verifica se o plugin de √°udio est√° dispon√≠vel
  Future<bool> _isAudioPlayerAvailable() async {
    try {
      // Verifica se estamos em web (onde o plugin pode ter limita√ß√µes)
      if (kIsWeb) {
        debugPrint('‚ö†Ô∏è Executando em web, usando simula√ß√£o de √°udio');
        return false;
      }
      
      // Para mobile/desktop, assume que o plugin est√° dispon√≠vel
      // O just_audio funciona nativamente nessas plataformas
      return true;
    } catch (e) {
      debugPrint('‚ö†Ô∏è Plugin de √°udio n√£o dispon√≠vel: $e');
      return false;
    }
  }
  
  /// Obt√©m a dura√ß√£o de uma m√∫sica espec√≠fica usando metadata do arquivo
  Future<Duration?> getSongDuration(String audioUrl) async {
    try {
      // Se o plugin n√£o estiver dispon√≠vel, retorna null
      if (kIsWeb || !await _isAudioPlayerAvailable()) {
        debugPrint('‚ö†Ô∏è Plugin de √°udio n√£o dispon√≠vel para obter dura√ß√£o');
        return null;
      }
      
      // Cria um player tempor√°rio para obter a dura√ß√£o
      final tempPlayer = AudioPlayer();
      await tempPlayer.setUrl(audioUrl);
      
      // Aguarda a dura√ß√£o ser carregada
      Duration? duration;
      await for (final d in tempPlayer.durationStream) {
        if (d != null) {
          duration = d;
          break;
        }
      }
      
      await tempPlayer.dispose();
      return duration;
    } catch (e) {
      debugPrint('‚ùå Erro ao obter dura√ß√£o da m√∫sica: $e');
      return null;
    }
  }

  /// Calcula a dura√ß√£o total de uma lista de m√∫sicas
  Future<Duration> calculateTotalDuration(List<Song> songs) async {
    if (songs.isEmpty) return Duration.zero;
    
    int totalSeconds = 0;
    
    for (final song in songs) {
      // Primeiro tenta obter a dura√ß√£o real do arquivo
      final realDuration = await getSongDuration(song.audioUrl);
      
      if (realDuration != null) {
        totalSeconds += realDuration.inSeconds;
        debugPrint('üéµ Dura√ß√£o real de "${song.title}": ${realDuration.inMinutes}:${(realDuration.inSeconds % 60).toString().padLeft(2, '0')}');
      } else {
        // Fallback: usa a dura√ß√£o da string se dispon√≠vel
        final durationParts = song.duration.split(':');
        if (durationParts.length == 2) {
          final minutes = int.tryParse(durationParts[0]) ?? 0;
          final seconds = int.tryParse(durationParts[1]) ?? 0;
          totalSeconds += minutes * 60 + seconds;
          debugPrint('üéµ Dura√ß√£o fallback de "${song.title}": ${song.duration}');
        } else {
          // Se n√£o conseguir obter dura√ß√£o, assume 3:30 como padr√£o
          totalSeconds += 210; // 3:30 em segundos
          debugPrint('üéµ Dura√ß√£o padr√£o para "${song.title}": 3:30');
        }
      }
    }
    
    return Duration(seconds: totalSeconds);
  }

  /// Pr√©-carrega a dura√ß√£o da m√∫sica a partir da string de dura√ß√£o
  void _preloadDuration(Song song) {
    try {
      // Tenta converter a dura√ß√£o da string para Duration
      final durationParts = song.duration.split(':');
      if (durationParts.length == 2) {
        final minutes = int.tryParse(durationParts[0]) ?? 0;
        final seconds = int.tryParse(durationParts[1]) ?? 0;
        _duration = Duration(minutes: minutes, seconds: seconds);
        debugPrint('üéµ Dura√ß√£o pr√©-carregada: ${song.title} - ${song.duration}');
        notifyListeners();
      } else {
        debugPrint('‚ö†Ô∏è Formato de dura√ß√£o inv√°lido: ${song.duration}');
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao pr√©-carregar dura√ß√£o: $e');
    }
  }

  /// Simula reprodu√ß√£o quando o plugin n√£o est√° dispon√≠vel
  void _simulatePlayback() {
    _isPlaying = true;
    _position = Duration.zero;
    
    // Se n√£o h√° dura√ß√£o pr√©-carregada, usa uma dura√ß√£o simulada padr√£o
    if (_duration == Duration.zero) {
      _duration = const Duration(minutes: 3, seconds: 30);
    }
    
    // Simula progresso da m√∫sica
    Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!_isPlaying) {
        timer.cancel();
        return;
      }
      
      _position += const Duration(seconds: 1);
      if (_position >= _duration) {
        _position = _duration;
        _isPlaying = false;
        timer.cancel();
      }
      notifyListeners();
    });
    
    notifyListeners();
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    super.dispose();
  }
}

